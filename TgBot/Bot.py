import forec as f
import buttons as b
import game as g
import cat as c
import film as ff
import asyncio
from aiogram import Bot, Dispatcher, types
from conf_reader import config
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

bot = Bot(token=config.bot_token.get_secret_value(), parse_mode='HTML')
dp = Dispatcher(bot=bot, storage=MemoryStorage())
coun = []
class WaitMovie(StatesGroup):
    waiting_for_year = State()
    waiting_for_country = State()
    waiting_for_genre = State()

async def start(message: types.Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}!\n–ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º?\N{winking face}",
                         reply_markup=b.kb_yn)

async def help(msg: types.Message):
    await msg.answer('_–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã_\n'
                     '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º, –µ—Å–ª–∏ –í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ '
                     '–±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –í–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞.\n\n'
                     '–¢–∞–∫–∂–µ —è –º–æ–≥—É —Ä–∞–∑–≤–ª–µ—á—å –í–∞—Å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –º–∏–ª–æ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞, '
                     '–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤ –∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å —Å –í–∞–º–∏ –≤ –∏–≥—Ä—É.\n\n'
                     '_–°–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥_:\n/help - –≤—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏\n/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
                     '/game - —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É\n/forecast - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n/cat - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ç–∏–∫–∞\n',
                     parse_mode='Markdown')

@dp.callback_query_handler(lambda c: c.data == 'but_weather')
async def location(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º :)",
                           reply_markup=b.kb_sh_loc)

@dp.callback_query_handler(lambda c: c.data == 'but_no')
async def command_no(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?', reply_markup=b.kb_gfc)

@dp.callback_query_handler(lambda c: c.data == 'but_film', state='*')
@dp.callback_query_handler(lambda c: c.data == 'but_yes', state='*')
async def command_yes(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–Ω—ë–º!\n–í—ã–±–∏—Ä–∞–π –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞.', reply_markup=b.kb_years)
    await state.set_state(WaitMovie.waiting_for_year.state)

@dp.message_handler(Text({"1950-1958", "1959-1967", "1968-1976", "1977-1985", "1986-1994", "1995-2003", "2004-2012", "2013-2017"}), state='*')
async def film_years(message: types.Message, state: FSMContext):
    await state.update_data(chosen_year=message.text.title())
    await message.answer('–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å–æ —Å—Ç—Ä–∞–Ω–æ–π –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è.\n–ù–∞–ø–∏—à–∏, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–Ω—è—Ç —Ñ–∏–ª—å–º?', reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(WaitMovie.waiting_for_country.state)
    @dp.message_handler(state='*')
    async def film_country(message: types.Message, state: FSMContext):
        await state.update_data(chosen_country=message.text.title())
        await state.set_state(WaitMovie.waiting_for_genre.state)
        await message.answer('–ö–∞–∫ –Ω–∞—Å—á–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞?', reply_markup=b.kb_genres)

@dp.message_handler(Text({'–∞–Ω–∏–º–µ', '–±–∏–æ–≥—Ä–∞—Ñ–∏—è', '–±–æ–µ–≤–∏–∫', '–≤–æ–µ–Ω–Ω—ã–π', '–¥–µ—Ç–µ–∫—Ç–∏–≤', '–¥–µ—Ç—Å–∫–∏–π', '–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', '–¥—Ä–∞–º–∞', '–∏—Å—Ç–æ—Ä–∏—è', '–∫–æ–º–µ–¥–∏—è', '–∫—Ä–∏–º–∏–Ω–∞–ª', '–º–µ–ª–æ–¥—Ä–∞–º–∞', '–º—É–ª—å—Ç—Ñ–∏–ª—å–º', '–º—é–∑–∏–∫–ª', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '—Å–ø–æ—Ä—Ç', '—Ç—Ä–∏–ª–ª–µ—Ä', '—É–∂–∞—Å—ã', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '—Ñ–∏–ª—å–º-–Ω—É–∞—Ä', '—Ñ—ç–Ω—Ç–µ–∑–∏'}), state='*')
async def film_genre(message: types.Message, state: FSMContext):
    await state.update_data(chosen_genre=message.text.lower())
    user_data = await state.get_data()
    await message.answer('–Ø –ø–æ–¥–æ–±—Ä–∞–ª —Ñ–∏–ª—å–º –¥–ª—è —Ç–µ–±—è :)', reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {ff.fill(user_data["chosen_year"], user_data["chosen_country"], user_data["chosen_genre"])}', reply_markup=b.kb_gffc)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'but_game')
async def game(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ü–æ–∏–≥—Ä–∞–µ–º –≤ "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"?\n–í—ã–±–∏—Ä–∞–π!',
                           reply_markup=b.kb_ssp)

@dp.callback_query_handler(lambda c: c.data == '–±—É–º–∞–≥–∞')
async def game1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç:{g.win(user_choice="–±—É–º–∞–≥—É")}')
    await bot.send_message(callback_query.from_user.id, '–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?', reply_markup=b.kb_gffc)

@dp.callback_query_handler(lambda c: c.data == '–∫–∞–º–µ–Ω—å')
async def game2(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç:{g.win(user_choice="–∫–∞–º–µ–Ω—å")}')
    await bot.send_message(callback_query.from_user.id, '–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?', reply_markup=b.kb_gffc)

@dp.callback_query_handler(lambda c: c.data == '–Ω–æ–∂–Ω–∏—Ü—ã')
async def game3(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç:{g.win(user_choice="–Ω–æ–∂–Ω–∏—Ü—ã")}')
    await bot.send_message(callback_query.from_user.id, '–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?', reply_markup=b.kb_gffc)

@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude
    await message.answer(f"–ü–æ–≥–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞\N{world map}:\n{f.get_location(lat, lon)}",
                         reply_markup=types.ReplyKeyboardRemove())
    await message.answer('–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è —Ç–µ–ø–µ—Ä—å?', reply_markup=b.kb_gcf)

@dp.callback_query_handler(lambda c: c.data == 'but_cats')
async def command_cats(callback_query: types.CallbackQuery):
    await bot.send_photo(callback_query.from_user.id, photo=c.getcat(coun))
    await bot.send_message(callback_query.from_user.id, '–ì–ª—è–Ω—å, –∫–∞–∫–∞—è –º–∏–ª–æ—Ç–∞ :3\n–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?',
                           reply_markup=b.kb_gffc)

async def main():
    dp.register_message_handler(start, commands={'start', 'restart'})
    dp.register_message_handler(help, commands='help')
    dp.register_message_handler(game, commands='game')
    dp.register_message_handler(command_cats, commands='cat')
    dp.register_message_handler(location, commands='forecast')
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
