import json
from lxml import etree
import requests
from conf_reader import config

key_forecast = config.api_forecast.get_secret_value()

def get_location(lat, lon):
    try:
        from BeautifulSoup import BeautifulSoup
    except ImportError:
        from bs4 import BeautifulSoup
    req = requests.get(f'https://nominatim.openstreetmap.org/search.php?q={lat}%2C+{lon}&format=jsonv2&debug=1')
    soup = BeautifulSoup(req.text, 'html.parser')
    t = etree.HTML(str(soup))
    place1 = str(t.xpath('/html/body/pre[10]/text()'))
    place2 = str(t.xpath('/html/body/pre[11]/text()'))
    if len(place1) > len(place2):
        place = place1
    else:
        place = place2
    ind1 = place.index('langaddress')
    ind2 = place.index('placename')
    address = place[ind1 + 17:ind2]
    token = address.split(',')
    city = str(token[2])
    return f'{city}\n{forecast(lat, lon)}'

def forecast(lat, lon):
    url = f'https://api.weather.yandex.ru/v2/informers/?lat={lat}&lon={lon}&[lang=ru_RU]'
    r = requests.get(url, headers={'X-Yandex-API-Key': key_forecast}, verify=False)
    yandex_json = json.loads(r.text)
    print(r)
    conds = {'clear': '—è—Å–Ω–æ', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
             'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ', 'drizzle': '–º–æ—Ä–æ—Å—å', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
             'rain': '–¥–æ–∂–¥—å', 'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π', 'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
             'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'showers': '–ª–∏–≤–µ–Ω—å',
             'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', 'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 'snow': '—Å–Ω–µ–≥',
             'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥', 'hail': '–≥—Ä–∞–¥', 'thunderstorm': '–≥—Ä–æ–∑–∞',
             'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
             }
    wind = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
            'se': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', '—Å': '—à—Ç–∏–ª—å'
            }
    yandex_json['fact']['condition'] = conds[yandex_json['fact']['condition']]
    yandex_json['fact']['wind_dir'] = wind[yandex_json['fact']['wind_dir']]
    for parts in yandex_json['forecast']['parts']:
        parts['condition'] = conds[parts['condition']]
        parts['wind_dir'] = wind[parts['wind_dir']]
    return f'\n{print_forec(yandex_json)}'

def print_forec(yandex_json):
    now = '–°–µ–π—á–∞—Å:' \
          f'\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {yandex_json["fact"]["temp"]}¬∞C' \
          f'\nüå°–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {yandex_json["fact"]["feels_like"]}¬∞C' \
          f'\n‚òÅ–û–±–ª–∞—á–Ω–æ—Å—Ç—å/–æ—Å–∞–¥–∫–∏: {yandex_json["fact"]["condition"]}' \
          f'\nüí®–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {yandex_json["fact"]["wind_speed"]}–º/—Å' \
          f'\nüß≠–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {yandex_json["fact"]["wind_dir"]}\n'
    i = 6
    late = ''
    for parts in yandex_json['forecast']['parts']:
        late += f'\n–ß–µ—Ä–µ–∑ {str(i)} —á–∞—Å–æ–≤:' \
                f'\nüå°–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {parts["temp_avg"]}¬∞C' \
                f'\nüå°–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {parts["feels_like"]}¬∞C' \
                f'\n‚òÅ–û–±–ª–∞—á–Ω–æ—Å—Ç—å/–æ—Å–∞–¥–∫–∏: {parts["condition"]}' \
                f'\nüí®–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {parts["wind_speed"]}–º/—Å' \
                f'\nüß≠–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {parts["wind_dir"]}\n'
        i += 6
    return now + late